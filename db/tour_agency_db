import click
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import sessionmaker, relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

# Define database models
class Tour(Base):
    __tablename__ = 'tours'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(String)
    duration = Column(Integer)
    cost = Column(Integer)
    guides = relationship("Guide", secondary="tour_guide_association")

class Customer(Base):
    __tablename__ = 'customers'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    contact = Column(String)
    preferences = Column(String)

class Guide(Base):
    __tablename__ = 'guides'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    expertise = Column(String)

class TourGuideAssociation(Base):
    __tablename__ = 'tour_guide_association'
    tour_id = Column(Integer, ForeignKey('tours.id'), primary_key=True)
    guide_id = Column(Integer, ForeignKey('guides.id'), primary_key=True)

@click.group()
def cli():
    """Tour Agency Management System"""

@cli.command()
@click.option('--name', prompt=True, help='Tour name')
@click.option('--description', prompt=True, help='Tour description')
@click.option('--duration', type=int, prompt=True, help='Tour duration (days)')
@click.option('--cost', type=int, prompt=True, help='Tour cost')
def create_tour(name, description, duration, cost):
    """Create a new tour"""
    engine = create_engine('sqlite:///tour_agency.db')
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    new_tour = Tour(name=name, description=description, duration=duration, cost=cost)
    session.add(new_tour)
    session.commit()
    session.close()

@cli.command()
def list_tours():
    """List all tours"""
    engine = create_engine('sqlite:///tour_agency.db')
    Session = sessionmaker(bind=engine)
    session = Session()
    
    tours = session.query(Tour).all()
    for tour in tours:
        print(f"ID: {tour.id}, Name: {tour.name}, Description: {tour.description}, Duration: {tour.duration} days, Cost: ${tour.cost}")

    session.close()

@cli.command()
@click.option('--name', prompt=True, help='Customer name')
@click.option('--contact', prompt=True, help='Customer contact details')
@click.option('--preferences', prompt=True, help='Customer preferences')
def create_customer(name, contact, preferences):
    """Create a new customer"""
    engine = create_engine('sqlite:///tour_agency.db')
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    new_customer = Customer(name=name, contact=contact, preferences=preferences)
    session.add(new_customer)
    session.commit()
    session.close()

@cli.command()
def list_customers():
    """List all customers"""
    engine = create_engine('sqlite:///tour_agency.db')
    Session = sessionmaker(bind=engine)
    session = Session()
    
    customers = session.query(Customer).all()
    for customer in customers:
        print(f"ID: {customer.id}, Name: {customer.name}, Contact: {customer.contact}, Preferences: {customer.preferences}")

    session.close()

if __name__ == '__main__':
    cli()
